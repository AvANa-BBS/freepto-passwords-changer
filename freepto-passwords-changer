#!/usr/bin/env python
from subprocess import Popen, PIPE
from crypt import crypt
import random
import string
import os.path
import stat
import gettext

gettext.bindtextdomain('freepto-passwords-changer', 'locale')
gettext.textdomain('freepto-passwords-changer')
_ = gettext.gettext

_SALT_CHARS = string.ascii_letters + string.digits + './'


def _crypt_salt(length=16):
    random.seed()
    return '$6$' + ''.join(
        (random.choice(_SALT_CHARS) for _ in xrange(length)))


def _crypt_password(password):
    """ Return crypted password """
    crypted_password = crypt(password, _crypt_salt())
    return crypted_password


def change_user_password(username, password):
    """ Change user password """
    shadow_password = _crypt_password(password)
    p = Popen(['/usr/sbin/usermod', '-p', shadow_password, username])
    p.communicate()
    return p.returncode == 0


def extract_disk_from_mounts(contents):
    """lines is a list of string (as in buffer.readlines())"""
# This is the same of grep persistence | awk '{ print $1 }'
    l = set(map(lambda s: s.split()[0],  # awk print $1
                filter(lambda l: 'persistence' in l,  # grep persistence
                       contents)))
    if len(l) > 1:
        raise StandardError('Too many possible persistence device')
    if len(l) < 1:
        raise StandardError('Device not found')
    dev = l.pop().strip()
    if dev == '':
        raise StandardError('Error finding persistence device')
    return dev


def get_freepto_disk():
    """ Return persistence device """
    device = extract_disk_from_mounts(open('/proc/mounts').readlines())
    if not stat.S_ISBLK(os.stat(device).st_mode):
        raise StandardError(
            'Found device (%s) does not seem a block device' % device)
    return device


def change_disk_passphrase(passwd, new_passwd):
    """ Change the persistence passphrase """
    freepto_disk = get_freepto_disk()
    p = Popen(['cryptsetup', 'luksChangeKey', freepto_disk],
              stdin=PIPE, stdout=PIPE, stderr=PIPE)
    p.communicate("%s\n%s" % (passwd, new_passwd))
    return p.returncode == 0


if __name__ == '__main__':
    import gtk

    def show_info(text):
        """ Show new gtk window with info style """
        dialog = gtk.MessageDialog(buttons=gtk.BUTTONS_OK)
        dialog.set_markup(text)
        dialog.connect('response', lambda x, _: dialog.destroy())
        dialog.show()

    def show_error(text):
        """ Show new gtk window with error style """
        dialog = gtk.MessageDialog(type=gtk.MESSAGE_ERROR,
                                   buttons=gtk.BUTTONS_OK)
        dialog.set_markup(text)
        dialog.connect('response', lambda x, _: dialog.destroy())
        dialog.show()

    class Main(gtk.Window):
        def __init__(self):
            gtk.Window.__init__(self, gtk.WINDOW_TOPLEVEL)
            self.set_border_width(10)
            box = gtk.VBox(False, 0)

            user_frame = UserFrame('paranoid')
            #disk_frame = DiskFrame()

            box.add(user_frame)
            #box.add(disk_frame)
            self.add(box)
            self.show_all()

            self.connect('destroy', self.destroy)
            self.set_title('Freepto Passwords Changer')

        def destroy(self, widget, data=None):
            gtk.main_quit()

    class UserFrame(gtk.Frame):
        '''This is a self-contained frame to handle user password change'''
        def __init__(self, username):
            gtk.Frame.__init__(self, _("Change user password"))
            self.username = username
            self.box = gtk.Table(3, 2, True)
            self.add(self.box)

            self.new_user_description = gtk.Label(_("New password"))
            self.new_user_input = gtk.Entry()
            self.new_user_input.set_visibility(False)

            self.box.attach(self.new_user_description, 0, 1, 0, 1)
            self.box.attach(self.new_user_input, 1, 2, 0, 1)

            self.repeat_user_description = gtk.Label(_("Repeat password"))
            self.repeat_user_input = gtk.Entry()
            self.repeat_user_input.set_visibility(False)

            self.box.attach(self.repeat_user_description, 0, 1, 1, 2)
            self.box.attach(self.repeat_user_input, 1, 2, 1, 2)

            self.save = gtk.Button(_('Change password'))
            self.repeat_user_input.connect('activate', self.save_settings,
                                           None)
            self.save.connect('clicked', self.save_settings, None)
            self.box.attach(self.save, 0, 1, 2, 3)

        def save_settings(self, widget, data=None):
            if self.new_user_input.get_text() != "":
                if self.new_user_input.get_text() != \
                   self.repeat_user_input.get_text():
                    show_error(_("Passwords are different."))
                else:
                    if change_user_password(self.username,
                                            self.new_user_input.get_text()):
                        show_info(_("Password changed!"))
                        self.new_user_input.set_text('')
                        self.repeat_user_input.set_text('')
                    else:
                        show_error(_("An error occurred while changing password. Please report the bug."))

    class DiskFrame(gtk.Frame):
        '''This is a self-contained frame to handle disk password change'''
        def __init__(self):
            gtk.Frame.__init__(self, _("Change Freepto passphrase"))
            self.box = gtk.Table(4, 2, True)
            self.add(self.box)

            self.disk_description = gtk.Label(_("Current passphrase"))
            self.disk_input = gtk.Entry()
            self.disk_input.set_visibility(False)

            self.box.attach(self.disk_description, 0, 1, 0, 1)
            self.box.attach(self.disk_input, 1, 2, 0, 1)

            self.new_disk_description = gtk.Label(_("New passphrase"))
            self.new_disk_input = gtk.Entry()
            self.new_disk_input.set_visibility(False)

            self.box.attach(self.new_disk_description, 0, 1, 1, 2)
            self.box.attach(self.new_disk_input, 1, 2, 1, 2)

            self.repeat_disk_description = gtk.Label(_("Repeat passphrase"))
            self.repeat_disk_input = gtk.Entry()
            self.repeat_disk_input.set_visibility(False)

            self.box.attach(self.repeat_disk_description, 0, 1, 2, 3)
            self.box.attach(self.repeat_disk_input, 1, 2, 2, 3)

            self.save = gtk.Button(_('Save'))
            self.save.connect('clicked', self.save_settings, None)
            self.box.attach(self.save, 0, 1, 3, 4)

        def save_settings(self, widget, data=None):
            if self.new_disk_input != "" and self.disk_input != "":
                disk_passwd = self.disk_input.get_text()
                new_disk_passwd = self.new_disk_input.get_text()
                repeat_disk_passwd = self.repeat_disk_input.get_text()
                if new_disk_passwd != repeat_disk_passwd:
                    show_error(_("Passphrases are different."))
                else:
                    if change_disk_passphrase(disk_passwd, new_disk_passwd):
                        show_info(_("Disk passphrase changed!"))
                        self.new_disk_input.set_text('')
                        self.repeat_disk_input.set_text('')
                        self.disk_input.set_text('')
                    else:
                        show_error(_("An error occurred while changing disk passphrase. Make sure your current disk passphrase is right."))

    m = Main()
    gtk.main()

# vim: set ts=4 sw=4 et:
